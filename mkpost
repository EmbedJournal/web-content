#!/usr/bin/env perl
# Custom post generation script for internal use by authors of
# embedjournal.com
#
#   Owner: EmbedJournal
#  Author: Siddharth Chandrasekaran
#   Email: siddharth@embedjournal.com
#    Date: 05 April 2017
#

use warnings;
use strict;
use Time::Piece;
use POSIX 'strftime';
use Getopt::Long;
use Pod::Usage 'pod2usage';
use YAML::XS qw(LoadFile DumpFile);
use File::Basename;

=head1 SYNOPSIS

  EmbedJournal Post Management Utility.
  mkpost [OPTIONS]

=head1 OPTIONS

  -d, --draft          Create new draft interactively
  -v, --verify PATH    Verify if a draft is structured correctly
  -p, --publish PATH   Publish a draft at POST
  -w, --wrap PATH      Wrap a draft specified by PATH for email.
  -t, --thumb IMAGE    Create post-thumb.jpg out of IMAGE
  -h, --help           Print this help

=head1 VERSION

0.01

=cut

my $author_default = {
    name => 'Your-Nick-Name',
    full_name => 'FistName LastName',
    email => 'you@example.com',
    short_desc => 'A short writeup about yourself.',
    social => {
        twitter  => 'https://twitter.com/XXX',
        facebook => 'https://facebook.com/XXX',
        github   => 'https://github.com/XXX',
        linkedin => 'https://in.linkedin.com/in/XXX'
    }
};

my $argc = @ARGV;

GetOptions(
  'draft'         => \ my $new_draft,
  'verify=s'      => \ my $verify_draft_path,
  'category=s'    => \ my $category_name,
  'publish=s'     => \ my $publishDraftPath,
  'wrap=s'        => \ my $packPostPath,
  'thumb=s'       => \ my $thumb_image,
  'help'          =>   sub { pod2usage(1) },
);

pod2usage(1) if($argc == 0);

sub readInput {
    my $inp;
    while (1) {
        print "$_[0]: ";
        chomp($inp = <STDIN>);
        return $inp if $inp;
    }
}

sub getSlug
{
    my $s = shift;
    $s = lc $s;
    $s =~ s/\s+/-/g;
    $s =~ s/\//-/g;
    $s =~ s/[^A-Za-z0-9\-\.]//g;
    $s =~ s/-+/-/g;
    return $s;
}

sub getCategory
{
    my @categories = ();

    opendir (my $dir, 'posts');
    while (my $entry = readdir $dir ) {
        next unless -d 'posts/' . $entry;
        next if $entry eq '.' or $entry eq '..';
        push @categories, $entry;
    }
    closedir $dir;

    for my $i (0..$#categories) {
        printf "\t%2d - %s\n", $i+1, $categories[$i];
    }

    print "\n";
    my $catID;
    while (1) {
        $catID = readInput("Category index");
        my $isValid = 1;
        $isValid = 0 if (($catID !~ /^\d+$/) or
                (int($catID) < 0) or
                (int($catID) > ($#categories + 1)));
        print ("\nInvalid Input\n") unless($isValid);
        last if ($isValid);
    }
    return $categories[int($catID)-1];
}

sub getInputInteractive()
{
	print "\n\t----------------------------------------------------------------------------\n";
	print "\t   EmbedJournal.com  - Add a brain to everything with embedded electronics      ";
	print "\n\t----------------------------------------------------------------------------\n";

	print "\n\t Welcome Author, Give your article a title. be sure to keep the title attractive\n";
	print   "\t meaningful and short. This how your post will be called once it is published\n";
	print   "\t Think what your readers will search for when they have to reach your post. Use\n";
	print   "\t those keywords in the post title so your post will be ranked well at Google.\n";
	print "\n";

	my $t = readInput("Post title");

	print "\n\t Currently we support the following categories. Choose the broad field that best\n";
	print   "\t suits your content. If your field is not here, or you have some doubts mail one\n";
	print   "\t other authors and they should be able to help you out.\n"
	print "\n";

	my $c = getCategory();

	return ($t, $c);
}

sub create_draft()
{
    unless(-f ".author.yml") {
        DumpFile('.author.yml', $author_default);
        system(vi => '.author.yml');
    }
    my $author_yml = LoadFile('.author.yml');
    my ($title, $category) = getInputInteractive();
    my $slug = getSlug($title);
    my $post_yml = {
        title => $title,
        date_created => strftime('%Y-%m-%dT%H:%M:%S%z', localtime()),
        author => $author_yml->{name},
        permalink => "/$slug/",
        category => $category,
    };
    my $draftPath = "drafts/draft-$slug";
    system("mkdir -p $draftPath");
    DumpFile("$draftPath/.post.yml", $post_yml);
    DumpFile("$draftPath/.author.yml", $author_yml);

    system("touch", "$draftPath/post.md");
    print "\nCreated new draft at $draftPath\n";
    exit;
}

sub pack_post()
{
    die "$packPostPath is not a draft path\n" unless (-d $packPostPath);
    my $zipName = strftime ('%y%m%d', localtime()) . "_post.tar.gz";
    system("tar", "czf", $zipName, $packPostPath);
    exit;
}

sub get_rand_token()
{
    srand( time() ^ ($$ + ($$ << 15)) );
        my @v = qw ( a e i o u y );
    my @c = qw ( b c d f g h j k l m n p q r s t v w x z );

    my ($flip, $str) = (0,'');
    $str .= ($flip++ % 2) ? $v[rand(6)] : $c[rand(20)] for 1 .. 9;
    $str =~ s/(....)/$1 . int rand(10)/e;
    $str = ucfirst $str if rand() > 0.5;
    return $str;
}

sub verify_draft($)
{
    my $path = shift;

    die "Error: Invalid draft path path $publishDraftPath" unless (-d $path);
    die "Error: Unable to locate .authors.yml\n" unless(-f "$path/.author.yml");
    die "Error: Unable to locate .post.yml\n" unless(-f "$path/.post.yml");
    die "Error: Unable to locate post.md\n" unless(-f "$path/post.md");

    my $count = 0;
    my $found_thumb = 0;
    opendir (my $dir, $path);
    while (my $entry = readdir $dir ) {
        next if $entry eq '.' or $entry eq '..' or $entry eq 'post.md' or $entry eq '.post.yml' or $entry eq '.author.yml';
        if ($entry =~ /^post-thumb\.\w+^/) {
            my $res = `identify $path/$entry`;
            $res =~ s/^.*\s(\d+x\d+)\s.*/$1/;
            die "Error: Invalid thumbnail resolution. Expected 165x165, got $res\n" if ($res ne '165x165');
            $found_thumb = 1; next;
        }
        $count++; # images (TODO: probably)
    }
    closedir $dir;

    unless ($found_thumb) {
        print ("Warning: Post doesn't have a thumbnail. It is advised to add a 165x165 jpg file.\n");
        print ("Note: You can create a thumbnail from an existing image with 'mkpost -t path_to_image_file'.\n");
    }

    print ("Warning: Post doesn't have any image. It is advised to add at least one image.\n") if ($count == 0);

    print ("Draft verification was successful!\n");
}

sub publish_draft()
{
    verify_draft($publishDraftPath);

    my $rand_token = get_rand_token();
    my $thumb = glob "$publishDraftPath/post-thumb.*";
    my $thumbnail = basename($thumb) if (defined($thumb));

    system(cat => "$publishDraftPath/.post.yml");

    exit if (readInput("Do you wish to proceed? [y/N]") !~ /y/i);

    my $post_yml = LoadFile("$publishDraftPath/.post.yml");
    my $post_slug = getSlug($post_yml->{title});
    my $category_slug = getSlug($post_yml->{category});
    my $postName = strftime('%Y-%m-%d-', localtime()) . $post_slug;

    my @fileList = grep {!(/post.md$/)} glob "$publishDraftPath/*";
    my $postPath = "posts/$category_slug";
    my $imagePath = "images/$category_slug/$postName";

    system("mkdir -p $postPath");
    system("mkdir -p $imagePath");
    open (my $O, "<", "$publishDraftPath/post.md");
    open (my $F, ">", "$postPath/$postName.md") or die "Unable to create post file";
    print $F "---\n";
    print $F "title: \"$post_yml->{title}\"\n";
    print $F "date: ", strftime('%Y-%m-%dT%H:%M:%S%z', localtime()), "\n";
    print $F "author: $post_yml->{author}\n";
    print $F "thumbnail: $thumbnail\n" if (defined($thumbnail));
    print $F "permalink: /$post_slug/\n";
    print $F "dsq_thread_id: \"$rand_token\"\n";
    print $F "category: \"$post_yml->{category}\"\n";
    print $F "tags: [  ]\n";
    print $F "---\n\n";

    while (<$O>) {
        print $F "$_";
    }

    foreach (@fileList) {
        system("cp", "$_", "$imagePath");
    }
    exit;
}

sub create_thumbnail()
{
    die "Unable to locate file: $thumb_image\n" unless (-f $thumb_image);

    my $path = dirname($thumb_image);
    system("convert $thumb_image -resize 165x165^ -gravity center -extent 165x165 $path/post-thumb.jpg");
    print "Created $path/post-thumb.jpg\n";
    exit;
}

create_draft() if $new_draft;
publish_draft() if (defined $publishDraftPath);
pack_post() if (defined $packPostPath);
create_thumbnail() if (defined $thumb_image);

# Keep this check last
verify_draft($verify_draft_path) if (defined $verify_draft_path);
